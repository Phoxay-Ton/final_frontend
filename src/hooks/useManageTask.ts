import { useState, useEffect, useCallback } from "react";
import axios from "axios";
import { ManageTask, AddManageTaskPayload } from "@/src/types/manageTask";
import { useAuth } from "@/src/hooks/useAuth";

interface Employee {
    Employee_ID: number;
    Name: string;
}

interface Division {
    Division_ID: number;
    Division_Name: string;
}

export interface UseManageTaskResult {
    manageTasks: ManageTask[];
    employees: Employee[];
    divisions: Division[];
    loading: boolean;
    error: string | null;
    fetchManageTasks: () => Promise<void>;
    fetchEmployeesByDivision: (divisionId: number | null) => Promise<void>;
    fetchDivisions: () => Promise<void>;
    updateManageTask: (updatedTask: ManageTask) => Promise<boolean>;
    deleteManageTask: (taskId: number) => Promise<boolean>;
    addManageTask: (payload: AddManageTaskPayload, file: File | null) => Promise<boolean>;
}

type ShowNotificationFunc = (title: string, message: string) => void;

export const useManageTask = (
    showNotification: ShowNotificationFunc
): UseManageTaskResult => {
    const [manageTasks, setManageTasks] = useState<ManageTask[]>([]);
    const [employees, setEmployees] = useState<Employee[]>([]);
    const [divisions, setDivisions] = useState<Division[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const { token } = useAuth();

    const TASK_API_BASE_URL = "http://localhost:8080/api/v1/Task";
    const ALL_DIVISIONS_API_URL = "http://localhost:8080/api/v1/Division";
    const TASK_API_BASE = "http://localhost:8080/api/v1/Task";


    const getAuthHeaders = useCallback(() => {
        return {
            "Content-Type": "application/json",
            ...(token && { Authorization: `Bearer ${token}` }),
        };
    }, [token]);

    const getFormDataAuthHeaders = useCallback(() => {
        return {
            ...(token && { Authorization: `Bearer ${token}` }),
        };
    }, [token]);

    const fetchManageTasks = useCallback(async () => {
        setLoading(true);
        setError(null);
        const currentToken = token || (typeof window !== "undefined" ? localStorage.getItem("token") : null);

        if (!currentToken) {
            setError("No authentication token found.");
            setLoading(false);
            showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", "‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫™‡∫π‡ªà‡∫•‡∫∞‡∫ö‡∫ª‡∫ö. ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫™‡∫π‡ªà‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÉ‡ªù‡ªà.");
            return;
        }

        try {
            const response = await axios.get(`${TASK_API_BASE_URL}/all-user`, {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${currentToken}`,
                },
            });

            const data = response.data?.data;

            if (Array.isArray(data)) {
                setManageTasks(data);
            } else {
                setManageTasks([]);
                console.error("Invalid data format for manage tasks:", data);
                showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", "‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ß‡∫Ω‡∫Å‡ªÑ‡∫î‡ªâ.");
            }

        } catch (err: any) {
            console.error("Error fetching manage tasks:", err);
            const errorMessage =
                err.response?.data?.message || err.message || "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÇ‡∫´‡∫º‡∫î‡∫ß‡∫Ω‡∫Å.";
            setError(errorMessage);
            showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", errorMessage);
        } finally {
            setLoading(false);
        }
    }, [token, showNotification, TASK_API_BASE_URL]);

    // Fixed fetchEmployeesByDivision function
    const fetchEmployeesByDivision = useCallback(async (divisionId: number | null) => {
        console.log(`fetchEmployeesByDivision called with divisionId: ${divisionId}`);

        // Clear employees if no division selected
        if (!divisionId || divisionId === 0) {
            setEmployees([]);
            return;
        }

        setLoading(true);
        setError(null);

        try {
            console.log(`Fetching employees for division ID: ${divisionId}`);
            const response = await axios.get(`${TASK_API_BASE_URL}/all-division-employee/${divisionId}`, {
                headers: getAuthHeaders(),
            });

            console.log(`API Response for division ${divisionId}:`, response.data);

            const data = response.data?.data;
            if (Array.isArray(data)) {
                setEmployees(data);
                console.log("Successfully fetched employees:", data);
            } else {
                setEmployees([]);
                console.error("Invalid data format for employees:", data);
                showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", "‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡ªÑ‡∫î‡ªâ.");
            }
        } catch (err: any) {
            console.error(`Error fetching employees for division ${divisionId}:`, err);
            setEmployees([]); // Clear employees on error
            const errorMessage =
                err.response?.data?.message || err.message || "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÇ‡∫´‡∫º‡∫î‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô.";
            setError(errorMessage);
            showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", errorMessage);
        } finally {
            setLoading(false);
        }
    }, [getAuthHeaders, showNotification, TASK_API_BASE_URL]); // Removed employees.length from dependencies

    const fetchDivisions = useCallback(async () => {
        setLoading(true);
        setError(null);
        try {
            const response = await axios.get(ALL_DIVISIONS_API_URL, {
                headers: getAuthHeaders(),
            });
            const data = response.data?.data;
            console.log("..........fetchDivisions API response:", data);
            if (Array.isArray(data)) {
                setDivisions(data);
                console.log("-------setDivisions:", data);
            } else {
                setDivisions([]);
                showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", "‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡∫∞‡ªÅ‡ªú‡∫á‡ªÑ‡∫î‡ªâ.");
            }
        } catch (err: any) {
            console.error("Error fetching divisions:", err);
            const errorMessage =
                err.response?.data?.message || err.message || "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡∫∞‡ªÅ‡ªú‡∫á.";
            setError(errorMessage);
            showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", errorMessage);
        } finally {
            setLoading(false);
        }
    }, [getAuthHeaders, showNotification, ALL_DIVISIONS_API_URL]);


    const onSave = useCallback(async (payload: AddManageTaskPayload, file: File | null): Promise<boolean> => {
        try {
            if (!token) {
                showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", "‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫™‡∫π‡ªà‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÉ‡ªù‡ªà.");
                return false;
            }

            const formData = new FormData();

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏õ‡πá‡∏ô text ‡∏•‡∏á formData
            formData.append('task_name', payload.task_name);
            formData.append('description', payload.description);
            formData.append('start_date', payload.start_date);
            formData.append('end_date', payload.end_date);
            formData.append('employee_id', String(payload.employee_id));
            formData.append('division_id', String(payload.division_id));
            formData.append('status', payload.status);

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (file) {
                formData.append('attachment', file);
            }

            // ‡∏™‡πà‡∏á formData ‡πÑ‡∏õ backend
            const response = await axios.post(TASK_API_BASE_URL, formData, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    // 'Content-Type': 'multipart/form-data'  <-- ‡∏õ‡∏•‡πà‡∏≠‡∏¢ axios ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏≠‡∏á
                }
            });

            if (response.status === 200 || response.status === 201) {
                showNotification("‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î", "‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫ß‡∫Ω‡∫Å‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß!");
                await fetchManageTasks();  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
                return true;
            } else {
                showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", "‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫ß‡∫Ω‡∫Å‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î.");
                return false;
            }
        } catch (error: any) {
            showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", error.response?.data?.message || error.message || "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î");
            return false;
        }
    }, [token, showNotification, fetchManageTasks]);







    const updateManageTask = useCallback(
        async (updatedTask: ManageTask): Promise<boolean> => {
            setLoading(true);
            setError(null);

            console.log("üß™ updatedTask =", updatedTask);

            try {
                if (!token) {
                    showNotification(
                        "‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î",
                        "‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫™‡∫π‡ªà‡∫•‡∫∞‡∫ö‡∫ª‡∫ö. ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫™‡∫π‡ªà‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÉ‡ªù‡ªà."
                    );
                    return false;
                }

                if (!updatedTask?.Task_ID) {
                    showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", "‡∫ö‡ªç‡ªà‡∫°‡∫µ Task ID ‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫Å‡∫≤‡∫ô‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î.");
                    return false;
                }

                // ‡∏ï‡∏±‡∏î manage_tasks_details ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á
                const { Task_ID, manage_tasks_details, ...taskData } = updatedTask;

                const response = await axios.put(
                    `${TASK_API_BASE}/${Task_ID}`,

                    taskData,
                    {
                        headers: getAuthHeaders(),
                    }
                );


                if (response.status === 200) {
                    showNotification("‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î", "‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡∫ß‡∫Ω‡∫Å‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß.");
                    await fetchManageTasks();
                    return true;
                } else {
                    showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", "‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡∫ß‡∫Ω‡∫Å‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î.");
                    return false;
                }
            } catch (err: any) {
                // console.error("Failed to update task:", err);
                const errorMessage =
                    err.response?.data?.message ||
                    err.message ||
                    "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î. ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡∫≠‡∫á‡ªÉ‡ªù‡ªà.";
                showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", errorMessage);
                setError(errorMessage);
                return false;
            } finally {
                setLoading(false);
            }
        },
        [token, showNotification, getAuthHeaders, TASK_API_BASE, fetchManageTasks]
    );



    const deleteManageTask = useCallback(async (taskId: number): Promise<boolean> => {
        setLoading(true);
        setError(null);
        try {
            if (!token) {
                showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", "‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫™‡∫π‡ªà‡∫•‡∫∞‡∫ö‡∫ª‡∫ö. ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫™‡∫π‡ªà‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÉ‡ªù‡ªà.");
                return false;
            }
            const response = await axios.delete(`${TASK_API_BASE_URL}/${taskId}`, {
                headers: getAuthHeaders(),
            });

            if (response.status === 200) {
                showNotification("‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î", "‡∫•‡∫∂‡∫ö‡∫ß‡∫Ω‡∫Å‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß.");
                await fetchManageTasks();
                return true;
            } else {
                showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", "‡∫•‡∫∂‡∫ö‡∫ß‡∫Ω‡∫Å‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î.");
                return false;
            }
        } catch (err: any) {
            // console.error("Failed to delete task:", err);
            const errorMessage =
                err.response?.data?.message || err.message || "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫•‡∫∂‡∫ö. ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡∫≠‡∫á‡ªÉ‡ªù‡ªà.";
            showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", errorMessage);
            setError(errorMessage);
            return false;
        } finally {
            setLoading(false);
        }
    }, [token, showNotification, getAuthHeaders, TASK_API_BASE_URL, fetchManageTasks]);

    useEffect(() => {
        const loadInitialData = async () => {
            if (!token) {
                setLoading(false);
                return;
            }
            setLoading(true);
            await Promise.all([
                fetchManageTasks(),
                fetchDivisions(),
            ]);
            setLoading(false);
        };

        loadInitialData();
    }, [token, fetchManageTasks, fetchDivisions]);

    return {
        manageTasks,
        employees,
        divisions,
        loading,
        error,
        fetchManageTasks,
        fetchEmployeesByDivision,
        fetchDivisions,
        updateManageTask,
        deleteManageTask,
        addManageTask: onSave,
    };
};