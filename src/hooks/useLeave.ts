// src/hooks/useLeave.ts
import { useState, useEffect, useCallback } from "react";
import axios from "axios";
import { Leave, Employee, LeaveType } from "@/src/types/leave"; // Adjust import paths as needed

interface UseLeaveResult {
    leaves: Leave[];
    employees: Employee[]; // Assuming you'll need employee names for the table/modal
    leaveTypes: LeaveType[]; // Assuming you'll need leave type names
    loading: boolean;
    error: string | null;
    fetchLeaves: () => Promise<void>;
    updateLeave: (updatedLeave: Leave) => Promise<boolean>;
    deleteLeave: (leaveId: number) => Promise<boolean>;
    createLeave: (newLeave: Omit<Leave, "id">) => Promise<boolean>;
}

export const useLeave = (
    showNotification: (title: string, message: string) => void
): UseLeaveResult => {
    const [leaves, setLeaves] = useState<Leave[]>([]);
    const [employees, setEmployees] = useState<Employee[]>([]);
    const [leaveTypes, setLeaveTypes] = useState<LeaveType[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);

    // Memoized function to fetch leave requests
    const fetchLeaves = useCallback(async () => {
        setLoading(true);
        setError(null);
        const token =
            typeof window !== "undefined" ? localStorage.getItem("token") : null;
        try {
            const response = await axios.get("http://localhost:8080/api/v1/Leave", {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
            });
            const data = response.data?.data;
            if (Array.isArray(data)) {
                setLeaves(data);
            } else {
                setLeaves([]);
                // console.error("Invalid data format received for leaves:", data);
                showNotification(
                    "‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î",
                    "‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫û‡∫±‡∫Å‡ªÑ‡∫î‡ªâ. ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á."
                );
            }
        } catch (err: any) {
            // console.error("Error fetching leaves:", err);
            setError(
                err.response?.data?.message || err.message || "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫û‡∫±‡∫Å."
            );
            setLeaves([]);
            showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫û‡∫±‡∫Å.");
        } finally {
            setLoading(false);
        }
    }, [showNotification]);
    useEffect(() => {
        const userString = localStorage.getItem("user");
        const user = userString ? JSON.parse(userString) : null;

        const allowedRoles = ["Admin", "Super_Admin"];
        if (!user || !user.role || !allowedRoles.includes(user.role.toLowerCase())) {
            setLeaves([]);
            setLoading(false);
            return;
        }
        fetchLeaves();
    }, []);
    const createLeave = async (newLeave: Omit<Leave, "id">): Promise<boolean> => {
        const token =
            typeof window !== "undefined" ? localStorage.getItem("token") : null;
        console.log("üì§ Payload ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ backend:", newLeave);

        try {
            const response = await axios.post("http://localhost:8080/api/v1/Leave", newLeave, {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
            });

            const created = response.data?.data;
            if (created) {
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° leave ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô state ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á fetch ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞ fetchLeaves() ‡∏Å‡πá‡πÑ‡∏î‡πâ
                setLeaves(prev => [...prev, created]);
                showNotification("‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î", "‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫û‡∫±‡∫Å‡ªÉ‡ªù‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î.");
                return true;
            } else {
                showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", "‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫™‡ªâ‡∫≤‡∫á‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫û‡∫±‡∫Å‡ªÑ‡∫î‡ªâ.");
                return false;
            }
        } catch (err: any) {
            // console.error("Error creating leave:", err);
            console.log("üõë Response Error:", err.response?.data);
            showNotification("‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î", err.response?.data?.message || "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫™‡ªâ‡∫≤‡∫á‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫û‡∫±‡∫Å.");
            return false;
        }
    };
    useEffect(() => {
        const userString = localStorage.getItem("user");
        const user = userString ? JSON.parse(userString) : null;

        const allowedRoles = ["Admin", "Super_Sdmin"];
        if (!user || !user.role || !allowedRoles.includes(user.role.toLowerCase())) {
            setLeaves([]);
            setLoading(false);
            return;
        }
        fetchLeaves();
    }, []);

    // Memoized function to fetch employee data (for names in table/modal)
    const fetchEmployees = useCallback(async () => {
        const token = typeof window !== "undefined" ? localStorage.getItem("token") : null;
        const userString = typeof window !== "undefined" ? localStorage.getItem("user") : null;
        const user = userString ? JSON.parse(userString) : null;

        if (!token || !user) {
            console.warn("‚ùå No token or user found.");
            return;
        }

        try {
            const response = await axios.get("http://localhost:8080/api/v1/Employee/all-approval", {
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });

            const data = response.data?.data;

            if (Array.isArray(data)) {
                // ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á filter ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ backend ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° role ‡πÅ‡∏•‡πâ‡∏ß
                setEmployees(data);
                console.log("‚úÖ Fetched employees for role:", user.role, data);
            } else {
                setEmployees([]);
                // console.error("‚ö†Ô∏è Invalid data format:", data);
            }
        } catch (err) {
            // console.error("‚ùå Error fetching employees:", err);
            setEmployees([]);
        }
    }, []);



    // Memoized function to fetch leave types
    const fetchLeaveTypes = useCallback(async () => {
        try {
            const response = await axios.get("http://localhost:8080/api/v1/Leave_Type", {
                headers: { "Content-Type": "application/json" },
            });
            const data = response.data?.data;
            if (Array.isArray(data)) {
                setLeaveTypes(data);
            } else {
                setLeaveTypes([]);
                // console.error("Invalid data format received for leave t‡∫ùypes:", data);
            }
        } catch (err) {
            // console.error("Error fetching leave types:", err);
            setLeaveTypes([]);
        }
    }, []);

    // Initial data fetch on component mount
    useEffect(() => {
        fetchLeaves();
        fetchEmployees(); // Fetch employees on mount
        fetchLeaveTypes(); // Fetch leave types on mount
    }, [fetchLeaves, fetchEmployees, fetchLeaveTypes]);

    // Function to update a leave request
    const updateLeave = async (updatedLeave: Leave): Promise<boolean> => {
        try {
            const response = await axios.put(
                `http://localhost:8080/api/v1/Leave/${updatedLeave.Leave_ID}`, // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å Leave_type_ID ‡πÄ‡∏õ‡πá‡∏ô Leave_ID
                updatedLeave,
                {
                    headers: { "Content-Type": "application/json" },
                }
            );

            if (response.status === 200) {
                showNotification("‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î", "‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫û‡∫±‡∫Å‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î!");
                fetchLeaves(); // Refresh data after successful update
                return true;
            } else {
                showNotification(
                    "‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î",
                    `‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫û‡∫±‡∫Å‡ªÑ‡∫î‡ªâ: ${response.data?.message || "‡∫°‡∫µ‡∫ö‡∫≤‡∫á‡∫¢‡ªà‡∫≤‡∫á‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î."}`
                );
                return false;
            }
        } catch (err: any) {
            // console.error("Failed to update leave:", err);
            showNotification(
                "‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î",
                `‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫û‡∫±‡∫Å‡ªÑ‡∫î‡ªâ: ${err.response?.data?.message || err.message || "‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡∫≠‡∫á‡ªÉ‡ªù‡ªà."}`
            );
            return false;
        }
    };
    // Function to delete a leave request
    const deleteLeave = async (leaveId: number): Promise<boolean> => {
        try {
            const token = localStorage.getItem("token"); // ‡∏î‡∏∂‡∏á token ‡∏°‡∏≤‡πÉ‡∏ä‡πâ
            const response = await axios.delete(
                `http://localhost:8080/api/v1/Leave/${leaveId}`,
                {
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${token}`,
                    },
                }
            );

            if (response.status === 200) {
                showNotification("‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î", "‡∫•‡∫∂‡∫ö‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫û‡∫±‡∫Å‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î!");
                fetchLeaves(); // Refresh data
                return true;
            } else {
                showNotification(
                    "‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î",
                    `‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫•‡∫∂‡∫ö‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫û‡∫±‡∫Å‡ªÑ‡∫î‡ªâ: ${response.data?.message || "‡∫°‡∫µ‡∫ö‡∫≤‡∫á‡∫¢‡ªà‡∫≤‡∫á‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î."}`
                );
                return false;
            }
        } catch (err: any) {
            showNotification(
                "‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î",
                `‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫•‡∫∂‡∫ö‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫û‡∫±‡∫Å‡ªÑ‡∫î‡ªâ: ${err.response?.data?.message || err.message || "‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡∫≠‡∫á‡ªÉ‡ªù‡ªà."}`
            );
            return false;
        }
    };


    return {
        leaves,
        employees,
        leaveTypes,
        loading,
        error,
        fetchLeaves,
        updateLeave,
        deleteLeave,
        createLeave,
    };
};