import axios from 'axios';
import { Employee, Department, Division, Position, ApiResponse } from '@/src/types/employee'; // Import types

// API Base URL - IMPORTANT: Consider moving this to an environment variable (.env.local)
const API_BASE_URL = "http://localhost:8080/api/v1/Employee";

export const employeeService = {
    async getAllEmployees(): Promise<Employee[]> {
        const response = await axios.get<ApiResponse<Employee>>(`${API_BASE_URL}/Employee`);
        if (response.data && Array.isArray(response.data.data)) {
            return response.data.data;
        }
        throw new Error('Invalid data format for employees');
    },

    async getEmployeeById(id: number): Promise<Employee> {
        const response = await axios.get<ApiResponse<Employee>>(`${API_BASE_URL}/Employee/${id}`);
        if (response.data && response.data.data && response.data.data.length > 0) {
            return response.data.data[0]; // Assuming API returns an array even for single item
        }
        throw new Error('Employee not found or invalid data format');
    },

    async createEmployee(employeeData: Omit<Employee, 'Employee_ID'>): Promise<Employee> {
        // Omitting Employee_ID as it's typically auto-generated by the backend
        const response = await axios.post<ApiResponse<Employee>>(`${API_BASE_URL}/Employee`, employeeData, {
            headers: { "Content-Type": "application/json" },
        });
        if (response.data && response.data.data && response.data.data.length > 0) {
            return response.data.data[0]; // Assuming the API returns the created employee data
        }
        throw new Error('Failed to create employee: Invalid response');
    },

    async updateEmployee(id: number, employeeData: Employee): Promise<Employee> {
        const response = await axios.put<ApiResponse<Employee>>(`${API_BASE_URL}/Employee/${id}`, employeeData, {
            headers: { "Content-Type": "application/json" },
        });
        if (response.data && response.data.data && response.data.data.length > 0) {
            return response.data.data[0]; // Assuming the API returns the updated employee data
        }
        throw new Error('Failed to update employee: Invalid response');
    },

    async deleteEmployee(id: number): Promise<void> {
        await axios.delete(`${API_BASE_URL}/Employee/${id}`);
    },

    // --- Related data services ---
    async getAllDepartments(): Promise<Department[]> {
        const response = await axios.get<ApiResponse<Department>>(`${API_BASE_URL}/Department`);
        if (response.data && Array.isArray(response.data.data)) {
            return response.data.data;
        }
        throw new Error('Invalid data format for departments');
    },

    async getAllDivisions(): Promise<Division[]> {
        const response = await axios.get<ApiResponse<Division>>(`${API_BASE_URL}/Division`);
        if (response.data && Array.isArray(response.data.data)) {
            return response.data.data;
        }
        throw new Error('Invalid data format for divisions');
    },

    async getAllPositions(): Promise<Position[]> {
        const response = await axios.get<ApiResponse<Position>>(`${API_BASE_URL}/Position`);
        if (response.data && Array.isArray(response.data.data)) {
            return response.data.data;
        }
        throw new Error('Invalid data format for positions');
    },
};